#-----------------------------------------Семинар 1 задание 1-----------------------------------------#
#Напишите программу, которая принимает на вход цифру, обозначающую день недели, и проверяет, является ли этот день выходным.
#Пример:
# - 6 -> да
# - 7 -> да
# - 1 -> нет

# week_day = int(input('Введите цифру дня недели: '))
# if week_day >= 1 and week_day <= 5:
#     print('Сегодня будний день')
# elif week_day == 6 or week_day == 7:
#     print('Сегодня выходной день')
# else:
#     print('Такого дня нет')

#-----------------------------------------Семинар 1 задание 2-----------------------------------------#
# Напишите программу для. проверки истинности утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.

# print('¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z')
# for x in range(2):
#     for y in range(2):
#         for z in range(2):
#             if not(x or y or z) == (not x and not y and not z):
#                 print(f'Утверждение истенно при X = {x}, Y = {y}, Z = {z}')
#             else:
#                 print(f'Утверждение ложно при X = {x}, Y = {y}, Z = {z}')

#-----------------------------------------Семинар 1 задание 3-----------------------------------------#
# Напишите программу, которая принимает на вход координаты точки (X и Y), причём X ≠ 0 и Y ≠ 0 и выдаёт номер четверти плоскости, в которой находится эта точка (или на какой оси она находится).
# Пример:
# - x=34; y=-30 -> 4
# - x=2; y=4-> 1
# - x=-34; y=-30 -> 3

# x, y = map(int, input('Введите координаты точки через затятую: ').split(','))
# if x > 0 and y > 0:
#     print(f'Точка {x},{y} находится в первой четверти')
# elif x < 0 and y > 0:
#     print(f'Точка {x},{y} находится во второй четверти')
# elif x < 0 and y < 0:
#     print(f'Точка {x},{y} находится в третьей четверти')
# elif x > 0 and y < 0:
#     print(f'Точка {x},{y} находится в четвертой четверти')
# elif x == 0 and y != 0:
#     print(f'Точка {x},{y} на координатной оси X')
# elif x != 0 and y == 0:
#     print(f'Точка {x},{y} на координатной оси Y')
# else:
#     print(f'Точка {x},{y} является началом координат')

#-----------------------------------------Семинар 1 задание 4-----------------------------------------#
# Напишите программу, которая по заданному номеру четверти, показывает диапазон возможных координат точек в этой четверти (x и y).

# number = int(input('Введите номер четверти: '))
# if number == 1:
#     print('К первой четверти относятся точки с координатами X > 0 и Y > 0')
# elif number == 2:
#     print('К втoрой четверти относятся точки с координатами X < 0 и Y > 0')
# elif number == 3:
#     print('К третьей четверти относятся точки с координатами X < 0 и Y < 0')
# elif number == 4:
#     print('К четвертой четверти относятся точки с координатами X > 0 и Y < 0')
# else:
#     print('Такой четверти не существует')

#-----------------------------------------Семинар 1 задание 5-----------------------------------------#
# Напишите программу, которая принимает на вход координаты двух точек и находит расстояние между ними в 2D пространстве.
# Пример:
# - A (3,6); B (2,1) -> 5,09
# - A (7,-5); B (1,-1) -> 7,21

# import math

# a_x, a_y = map(int, input('Введите координаты точки А: ').split(','))
# b_x, b_y = map(int, input('Введите координаты точки B: ').split(','))
# distance = math.sqrt((a_x - b_x)**2 + (a_y - b_y)**2)
# print(f'Длина отрезка AB равна {round(distance,2)}')

#-----------------------------------------Семинар 1 задание 6-----------------------------------------#
# 1. Реализовать вывод информации о промежутке времени в зависимости от его продолжительности duration в секундах: 
# до минуты: <s> сек; до часа: <m> мин <s> сек; до суток: <h> час <m> мин <s> сек; * в остальных случаях: <d> дн <h> час <m> мин <s> сек.
# Примеры:
# duration = 53
# 53 сек
# duration = 153
# 2 мин 33 сек
# duration = 4153
# 1 час 9 мин 13 сек
# duration = 400153
# 4 дн 15 час 9 мин 13 сек

# duration = int(input('Введите время в секундах: '))
# sec_limit = 60
# min_limit = sec_limit * 60
# hours_limit = min_limit * 24
# if duration < sec_limit:
#     print(f'{duration} сек')
# elif duration < min_limit and duration > sec_limit:
#     print(f'{duration // sec_limit} мин {duration % sec_limit} сек')
# elif duration < hours_limit and duration > min_limit:
#     print(f'{duration // min_limit} час {(duration % min_limit) // sec_limit} мин {((duration % min_limit) % sec_limit) % sec_limit} сек')
# else:
#     print(f'{duration // hours_limit} дн {(duration % hours_limit) // min_limit} час {((duration % hours_limit) % min_limit) // sec_limit} мин {(((duration % hours_limit) % min_limit) % sec_limit) % sec_limit} сек')

#-----------------------------------------Семинар 1 задание 7-----------------------------------------#
# Создать список, состоящий из кубов нечётных чисел от 1 до 1000 (куб X - третья степень числа X):
# Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7. 
# Например, число «19 ^ 3 = 6859» будем включать в сумму, так как 6 + 8 + 5 + 9 = 28 – делится нацело на 7. Внимание: использовать только арифметические операции!
# К каждому элементу списка добавить 17 и заново вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.
# * Решить задачу под пунктом b, не создавая новый список.

def sum_elements(list):
    sum_element_in_list = 0
    for element in list:
        sum_element = 0
        for i in str(element):
            sum_element += int(i)
        if sum_element % 7 == 0:
            sum_element_in_list += element
    return sum_element_in_list


start_list = [element**3 for element in range (1,1000,2)]
print(start_list)
print(f'Сумма элементов делящихся на 7 в исходном массиве {sum_elements(start_list)}')
start_list = [element + 17 for element in start_list]
print(start_list)
print(f'Сумма элементов делящихся на 7 в новом массиве {sum_elements(start_list)}')
